apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: ucp.ucp-package.lever-v2
  annotations:
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    ootb.apps.tanzu.vmware.com/apidescriptor-ref: "true"
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: where-for-dinner-availability
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/component: run
    carto.run/workload-name: ucp.ucp-package.lever-v2
spec:
  template:
    metadata:
      annotations:
        apps.tanzu.vmware.com/correlationid: gcr.io/adhol-playground/lsp:dev-where-for-dinner-availability?sub_path=/
        autoscaling.knative.dev/minScale: "1"
        boot.spring.io/version: 3.1.3
        conventions.carto.run/applied-conventions: |-
          appliveview-sample/app-live-view-appflavour-check
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-web
          spring-boot-convention/spring-boot-actuator
          spring-boot-convention/spring-boot-actuator-probes
          spring-boot-convention/app-live-view-appflavour-check
          spring-boot-convention/app-live-view-connector-boot
          spring-boot-convention/app-live-view-appflavours-boot
          spring-boot-convention/service-intent-postgres
          spring-boot-convention/service-intent-rabbitmq
          spring-boot-convention/service-intent-kafka
        developer.conventions/target-containers: workload
        kubectl.kubernetes.io/last-applied-configuration: |
          {"apiVersion":"carto.run/v1alpha1","kind":"Workload","metadata":{"annotations":{"local-source-proxy.apps.tanzu.vmware.com":"gcr.io/adhol-playground/lsp:dev-where-for-dinner-availability@sha256:e0df791afe23906ed5b99243cc575e5aafff1bc575374c1cb4c2d6b6ca67ccdb"},"creationTimestamp":"2023-10-18T21:35:11Z","generation":2,"labels":{"app.kubernetes.io/part-of":"where-for-dinner-availability","apps.tanzu.vmware.com/workload-type":"web"},"name":"ucp.ucp-package.lever-v2","namespace":"dev","resourceVersion":"27206860","uid":"f1a4d3fc-1416-4f07-8d37-d6732125edd6"},"spec":{"build":{"env":[{"name":"BP_JVM_VERSION","value":"17"},{"name":"BP_MAVEN_ACTIVE_PROFILES","value":"streams"}]},"env":[{"name":"spring_profiles_active","value":"rabbitmq"}],"params":[{"name":"annotations","value":{"autoscaling.knative.dev/minScale":"1"}},{"name":"ports","value":[{"containerPort":8080,"name":"http","port":80}]},{"name":"api_descriptor","value":{"description":"Core Where For Dinner service for retrieving dining availability","location":{"path":"/v3/api-docs"},"owner":"where-for-dinner-team","system":"where-for-dinner","type":"openapi"}}],"resources":{"limits":{"cpu":"1500m","memory":"750M"},"requests":{"cpu":"100m","memory":"500M"}},"serviceClaims":[{"name":"rmq","ref":{"apiVersion":"services.apps.tanzu.vmware.com/v1alpha1","kind":"ClassClaim","name":"msgbroker-where-for-dinner"}}],"source":{"image":"gcr.io/adhol-playground/lsp:dev-where-for-dinner-availability@sha256:e0df791afe23906ed5b99243cc575e5aafff1bc575374c1cb4c2d6b6ca67ccdb"}}}
        local-source-proxy.apps.tanzu.vmware.com: gcr.io/adhol-playground/lsp:dev-where-for-dinner-availability@sha256:e0df791afe23906ed5b99243cc575e5aafff1bc575374c1cb4c2d6b6ca67ccdb
        services.conventions.carto.run/kafka: kafka-clients/3.4.1
        services.conventions.carto.run/postgres: r2dbc-postgresql/1.0.2.RELEASE
        services.conventions.carto.run/rabbitmq: amqp-client/5.17.1
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: where-for-dinner-availability
        apps.tanzu.vmware.com/auto-configure-actuators: "false"
        apps.tanzu.vmware.com/workload-type: web
        carto.run/workload-name: ucp.ucp-package.lever-v2
        conventions.carto.run/framework: spring-boot
        services.conventions.carto.run/kafka: workload
        services.conventions.carto.run/postgres: workload
        services.conventions.carto.run/rabbitmq: workload
        tanzu.app.live.view: "true"
        tanzu.app.live.view.application.actuator.path: actuator
        tanzu.app.live.view.application.actuator.port: "8080"
        tanzu.app.live.view.application.flavours: spring-boot
        tanzu.app.live.view.application.name: ucp.ucp-package.lever-v2
    spec:
      containers:
      - env:
        - name: spring_profiles_active
          value: rabbitmq
        - name: JAVA_TOOL_OPTIONS
          value: -Dmanagement.endpoint.health.probes.add-additional-paths="true" -Dmanagement.health.probes.enabled="true" -Dserver.port="8080"
        image: us-east4-docker.pkg.dev/adhol-playground/ucp-with-syncer/wfd/ucp.ucp-package.lever-v2-dev@sha256:7d0b77e182e35b22e95d3d9b76eaf50eaf14d693cd3e66c6495f0937365ba486
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
        resources:
          limits:
            cpu: 1500m
            memory: 750M
          requests:
            cpu: 100m
            memory: 500M
        securityContext:
          runAsUser: 1000
        startupProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
      serviceAccountName: default

